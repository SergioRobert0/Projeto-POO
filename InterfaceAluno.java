/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package trabalhopoo;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.TableRowSorter;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.sql.PreparedStatement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.Period;

import java.util.ArrayList;
import java.util.List;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.ResultSet;
import java.text.ParseException;
import javax.swing.JButton;

/**
 *
 * @author CTU
 */
public class InterfaceAluno extends javax.swing.JFrame {

    /**
     * Creates new form InterfaceAluno
     */
    public InterfaceAluno() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDtNasc = new javax.swing.JLabel();
        lblMatricula = new javax.swing.JLabel();
        textoNome = new javax.swing.JTextField();
        lblNome = new javax.swing.JLabel();
        buttonBuscar = new javax.swing.JButton();
        buttonCadastro = new javax.swing.JButton();
        buttonVelho = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lblTelefone = new javax.swing.JLabel();
        buttonNovo = new javax.swing.JButton();
        buttonExcluir = new javax.swing.JButton();
        lblCPF = new javax.swing.JLabel();
        textoDataNasc = new javax.swing.JFormattedTextField();
        textoTelefone = new javax.swing.JFormattedTextField();
        textoCPF = new javax.swing.JFormattedTextField();
        id = new javax.swing.JFormattedTextField();
        campoIndice = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        lblMatricula1 = new javax.swing.JLabel();
        exportarTabela = new javax.swing.JButton();
        lblMatricula2 = new javax.swing.JLabel();
        mostrarTodos = new javax.swing.JButton();
        buttonAtualizar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblDtNasc.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblDtNasc.setText("Dt. nascimento:");

        lblMatricula.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblMatricula.setText("Matricula:");

        textoNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textoNomeActionPerformed(evt);
            }
        });

        lblNome.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblNome.setText("Nome:");

        buttonBuscar.setText("Buscar");
        buttonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBuscarActionPerformed(evt);
            }
        });

        buttonCadastro.setText("Cadastrar");
        buttonCadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCadastroActionPerformed(evt);
            }
        });

        buttonVelho.setText("Mais velho");
        buttonVelho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonVelhoActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Matricula", "Nome", "Data de nascimento", "Idade", "Telefone", "CPF"
            }
        ));
        jTable1.setToolTipText("");
        jScrollPane1.setViewportView(jTable1);

        lblTelefone.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblTelefone.setText("Telefone:");

        buttonNovo.setText("Mais Novo");
        buttonNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNovoActionPerformed(evt);
            }
        });

        buttonExcluir.setText("Excluir");
        buttonExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExcluirActionPerformed(evt);
            }
        });

        lblCPF.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblCPF.setText("   CPF:");

        try {
            textoDataNasc.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            textoTelefone.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##)#####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            textoCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            id.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idActionPerformed(evt);
            }
        });

        jLabel1.setText("√çndice");

        lblMatricula1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblMatricula1.setText("Todos os Cadastros :");

        exportarTabela.setText("Exportar");
        exportarTabela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportarTabelaActionPerformed(evt);
            }
        });

        lblMatricula2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblMatricula2.setText("Exportar CSV:");

        mostrarTodos.setText("Cadastros");
        mostrarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarTodosActionPerformed(evt);
            }
        });

        buttonAtualizar.setText("Atualizar no Banco");
        buttonAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAtualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(buttonCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(buttonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(buttonVelho, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(buttonNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(buttonExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textoTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(681, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblMatricula, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(74, 74, 74)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoIndice, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblMatricula2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportarTabela)
                        .addGap(133, 133, 133))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(lblDtNasc, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textoDataNasc))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblNome, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textoNome, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblMatricula1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mostrarTodos)
                        .addGap(127, 127, 127))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textoCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMatricula, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoIndice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(exportarTabela)
                    .addComponent(lblMatricula2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textoNome, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNome, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblDtNasc, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(textoDataNasc)
                                .addGap(2, 2, 2))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMatricula1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mostrarTodos))))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textoTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textoCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(buttonAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonVelho, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void textoNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textoNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textoNomeActionPerformed

    private void buttonCadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCadastroActionPerformed
        try {
            //cria uma vari√°vel que se conecta com o banco de dados.    
            Connection con;
            Statement st;
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/controle", "root", "Sergio_robert01234.");
            st = con.createStatement();

            // Convers√£o da data (aceitando e ajustando datas inv√°lidas)
            String dataBr = textoDataNasc.getText(); // Ex: "32/01/2022"
            SimpleDateFormat formatoBr = new SimpleDateFormat("dd/MM/yyyy");
            // N√ÉO usamos setLenient(false), ent√£o aceita datas como "32/01/2022"
            Date dataConvertida = formatoBr.parse(dataBr);

            SimpleDateFormat formatoMySQL = new SimpleDateFormat("yyyy-MM-dd");
            String dataFormatada = formatoMySQL.format(dataConvertida); // Ex: "2022-02-01"

            String sql = "INSERT INTO aluno VALUES('" + id.getText() + "', '" + textoNome.getText() + "', '" + dataFormatada + "', '" + textoTelefone.getText() + "', '" + textoCPF.getText() + "')";
            st.executeUpdate(sql);

            JOptionPane.showMessageDialog(null, "Dados inseridos com sucesso");
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Erro no driver: " + ex.getMessage());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro na conex√£o: " + ex.getMessage());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao converter a data: " + ex.getMessage());

        }

        boolean cadastrado = true;

        String matricula = id.getText();
        String nome = textoNome.getText();
        String dataNascStr = textoDataNasc.getText().trim();
        String telefone = textoTelefone.getText();
        String cpf = textoCPF.getText();
        String indiceStr = campoIndice.getText().trim(); // campo opcional de √≠ndice

// Verifica√ß√£o obrigat√≥ria de campos principais
        if (matricula.isEmpty() || nome.isEmpty() || dataNascStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Preencha matr√≠cula, nome e data de nascimento.");
            return;
        }

// Verifica se j√° existe matr√≠cula ou CPF na tabela antes de cadastrar
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            String matriculaTabela = model.getValueAt(i, 0).toString();
            String cpfTabela = model.getValueAt(i, 5).toString();

            if (matriculaTabela.equals(matricula)) {
                JOptionPane.showMessageDialog(this, "Matr√≠cula j√° cadastrada.");
                return;
            }
            if (cpfTabela.equals(cpf)) {
                JOptionPane.showMessageDialog(this, "CPF j√° cadastrado.");
                return;
            }
        }

        try {
            // Formata a data de nascimento e calcula idade
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            LocalDate dataNasc = LocalDate.parse(dataNascStr, formatter);
            LocalDate hoje = LocalDate.now();
            int idade = Period.between(dataNasc, hoje).getYears();

            Object[] novaLinha = new Object[]{matricula, nome, dataNascStr, idade, telefone, cpf};

            if (!indiceStr.isEmpty()) {
                try {
                    int indice = Integer.parseInt(indiceStr);

                    if (indice >= 0 && indice <= model.getRowCount()) {
                        model.insertRow(indice, novaLinha);
                        JOptionPane.showMessageDialog(this, "Aluno inserido no √≠ndice " + indice + ".");
                    } else {
                        JOptionPane.showMessageDialog(this, "√çndice inv√°lido. Insira um valor entre 0 e " + model.getRowCount());
                        return;
                    }
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "√çndice inv√°lido. Digite um n√∫mero inteiro.");
                    return;
                }
            } else {
                model.addRow(novaLinha);
                JOptionPane.showMessageDialog(this, "Aluno cadastrado com sucesso.");
            }

            // Limpa os campos ap√≥s cadastro
            id.setText("");
            textoNome.setText("");
            textoDataNasc.setText("");
            textoTelefone.setText("");
            textoCPF.setText("");
            campoIndice.setText("");

        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(this, "Data de nascimento inv√°lida. Use o formato dd/MM/yyyy.");
        }

        List<Aluno> listaAlunos = new ArrayList<>();

        Aluno novoAluno = new Aluno(matricula, nome, dataNascStr, telefone, cpf);

        listaAlunos.add(novoAluno);

        try (BufferedWriter writer = new BufferedWriter(new FileWriter("ListagemAlunos.txt"))) {
            for (Aluno a : listaAlunos) {
                writer.write(a.toCSV());
                writer.newLine();
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao salvar no arquivo: " + ex.getMessage());
        }
    }//GEN-LAST:event_buttonCadastroActionPerformed

    private void buttonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBuscarActionPerformed

        // Abre a janelinha para digitar a matr√≠cula
        JanelaBuscaMatricula janelaBusca = new JanelaBuscaMatricula(this, matricula -> {
            try {
                // Conex√£o com o banco
                Connection con;
                Class.forName("com.mysql.jdbc.Driver");
                con = DriverManager.getConnection("jdbc:mysql://localhost:3306/controle", "root", "Sergio_robert01234.");

                // Consulta SQL com matr√≠cula
                String sql = "SELECT * FROM aluno WHERE matricula = ?";
                PreparedStatement pst = con.prepareStatement(sql);
                pst.setString(1, matricula);

                // Executa a consulta
                java.sql.ResultSet rs = pst.executeQuery();

                // Verifica se encontrou o aluno
                if (rs.next()) {
                    String nome = rs.getString("nome");
                    String dataNasc = rs.getString("dataNascimento");
                    String telefone = rs.getString("telefone");
                    String cpf = rs.getString("cpf");

                    // Converte data para calcular idade
                    LocalDate dataNascLocal = LocalDate.parse(dataNasc);
                    int idade = Period.between(dataNascLocal, LocalDate.now()).getYears();

                    // Exibe os dados
                    JOptionPane.showMessageDialog(this,
                            "Aluno encontrado:\n"
                            + "Nome: " + nome + "\n"
                            + "Nascimento: " + DateTimeFormatter.ofPattern("dd/MM/yyyy").format(dataNascLocal) + "\n"
                            + "Idade: " + idade + "\n"
                            + "Telefone: " + telefone + "\n"
                            + "CPF: " + cpf);
                } else {
                    JOptionPane.showMessageDialog(this, "Nenhum aluno com essa matr√≠cula foi encontrado.");
                }

                // Fecha recursos
                rs.close();
                pst.close();
                con.close();

            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(this, "Erro ao buscar aluno: " + ex.getMessage());
            }
        });

        janelaBusca.setVisible(true);
    }//GEN-LAST:event_buttonBuscarActionPerformed

    // M√©todo acionado quando o bot√£o "Excluir" for clicado
    private void buttonExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExcluirActionPerformed
        // Abre uma caixa de di√°logo para o usu√°rio digitar a matr√≠cula do aluno a ser exclu√≠do
        String matriculaExcluir = JOptionPane.showInputDialog(this, "Digite a matr√≠cula do aluno a ser exclu√≠do:");

        // Verifica se o campo est√° vazio ou o usu√°rio cancelou    
        if (matriculaExcluir == null || matriculaExcluir.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Matr√≠cula inv√°lida.");
            return; // Encerra o m√©todo
        }

        // Carrega o driver JDBC para conex√£o com o MySQL (necess√°rio apenas uma vez no programa)
        try {
            // Usa try-with-resources para fechar conex√£o e statement automaticamente
            Class.forName("com.mysql.cj.jdbc.Driver");

            try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/controle", "root", "Sergio_robert01234."); PreparedStatement stmt = con.prepareStatement("DELETE FROM aluno WHERE matricula = ?")) {

                stmt.setString(1, matriculaExcluir);

                int linhasAfetadas = stmt.executeUpdate();

                if (linhasAfetadas > 0) {
                    // Remove da JTable
                    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                    for (int i = 0; i < model.getRowCount(); i++) {
                        String matriculaTabela = model.getValueAt(i, 0).toString();
                        if (matriculaTabela.equals(matriculaExcluir)) {
                            model.removeRow(i);
                            break;
                        }
                    }
                    JOptionPane.showMessageDialog(this, "Aluno removido com sucesso.");
                } else {
                    JOptionPane.showMessageDialog(this, "Matr√≠cula n√£o encontrada no banco de dados.");
                }
            }

        } catch (ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage());
        }

    }//GEN-LAST:event_buttonExcluirActionPerformed

    private void buttonVelhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonVelhoActionPerformed
        //cria um organizador de linhas para ordenar as linhas das tabelas     
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        jTable1.setRowSorter(sorter);

        //CRIA UMA LISTA DE CHAVES DE ORDENA√á√ÉO
        List<RowSorter.SortKey> sortKeys = new ArrayList<>();
        sortKeys.add(new RowSorter.SortKey(3, SortOrder.DESCENDING));

        sorter.setSortKeys(sortKeys);
        sorter.sort();
    }//GEN-LAST:event_buttonVelhoActionPerformed

    private void buttonNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNovoActionPerformed
        //cria um organizador de linhas para ordenar as linhas das tabelas     
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        jTable1.setRowSorter(sorter);

        //CRIA UMA LISTA DE CHAVES DE ORDENA√á√ÉO
        List<RowSorter.SortKey> sortKeys = new ArrayList<>();
        sortKeys.add(new RowSorter.SortKey(3, SortOrder.ASCENDING));

        sorter.setSortKeys(sortKeys);
        sorter.sort();
    }//GEN-LAST:event_buttonNovoActionPerformed

    private void exportarTabelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportarTabelaActionPerformed

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        try (BufferedWriter writer = new BufferedWriter(new FileWriter("ListagemAlunos.txt"))) {
            for (int i = 0; i < model.getRowCount(); i++) {
                String matricula = model.getValueAt(i, 0).toString();
                String nome = model.getValueAt(i, 1).toString();
                String idade = model.getValueAt(i, 3).toString();
                String dataNasc = model.getValueAt(i, 2).toString();
                String telefone = model.getValueAt(i, 4).toString();
                String cpf = model.getValueAt(i, 5).toString();

                String linhaCSV = matricula + ", " + nome + " ;" + idade + ";" + dataNasc + "; " + telefone + ";" + cpf;
                writer.write(linhaCSV);
                writer.newLine();
            }

            JOptionPane.showMessageDialog(this, "Tabela exportada com sucesso para ListagemAlunos.txt");

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Erro ao exportar a tabela: " + e.getMessage());
        }


    }//GEN-LAST:event_exportarTabelaActionPerformed

    private void mostrarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarTodosActionPerformed

        String url = "jdbc:mysql://localhost:3306/controle";
        String user = "root";
        String password = "Sergio_robert01234.";

        String query = "SELECT matricula, nome, dataNascimento, telefone, cpf FROM aluno";

        StringBuilder builder = new StringBuilder();

        try (Connection con = DriverManager.getConnection(url, user, password); PreparedStatement stmt = con.prepareStatement(query); ResultSet rs = stmt.executeQuery()) {

            while (rs.next()) {
                String matricula = rs.getString("matricula");
                String nome = rs.getString("nome");
                String dataNasc = rs.getString("dataNascimento");
                String telefone = rs.getString("telefone");
                String cpf = rs.getString("cpf");

                // Aqui voc√™ pode calcular a idade se quiser, ou deix√°-la fora
                builder.append(matricula)
                        .append(", ").append(nome)
                        .append(";").append(dataNasc)
                        .append("; ").append(telefone)
                        .append(";").append(cpf)
                        .append("\n");
            }

            if (builder.length() == 0) {
                JOptionPane.showMessageDialog(this, "Nenhum aluno encontrado.");
            } else {
                JOptionPane.showMessageDialog(this, builder.toString(), "Alunos no Banco", JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao acessar o banco: " + e.getMessage());
        }


    }//GEN-LAST:event_mostrarTodosActionPerformed

    private void buttonAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAtualizarActionPerformed

        //////////////

        
    String matricula = id.getText(); // N√ÉO ser√° modificada
        String nome = textoNome.getText();
        String dataNascStr = textoDataNasc.getText().trim();
        String telefone = textoTelefone.getText();
        String cpf = textoCPF.getText();

        if (matricula.isEmpty() || nome.isEmpty() || dataNascStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Preencha matr√≠cula, nome e data de nascimento.");
            return;
        }

        try {
            // Converte data para formato MySQL
            SimpleDateFormat formatoBr = new SimpleDateFormat("dd/MM/yyyy");
            Date dataConvertida = formatoBr.parse(dataNascStr);
            SimpleDateFormat formatoMySQL = new SimpleDateFormat("yyyy-MM-dd");
            String dataFormatada = formatoMySQL.format(dataConvertida);

            // Atualiza no banco
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/controle", "root", "Sergio_robert01234.");
            String sql = "UPDATE aluno SET nome = ?, dataNascimento = ?, telefone = ?, cpf = ? WHERE matricula = ?";
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, nome);
            ps.setString(2, dataFormatada);
            ps.setString(3, telefone);
            ps.setString(4, cpf);
            ps.setString(5, matricula);
            int rowsAffected = ps.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Dados atualizados com sucesso.");
            } else {
                JOptionPane.showMessageDialog(this, "Aluno n√£o encontrado.");
            }

            ps.close();
            con.close();

            // Atualiza a linha da tabela (JTable)
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            for (int i = 0; i < model.getRowCount(); i++) {
                if (model.getValueAt(i, 0).toString().equals(matricula)) {
                    // Recalcula idade
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                    LocalDate dataNasc = LocalDate.parse(dataNascStr, formatter);
                    int idade = Period.between(dataNasc, LocalDate.now()).getYears();

                    model.setValueAt(nome, i, 1);
                    model.setValueAt(dataNascStr, i, 2);
                    model.setValueAt(idade, i, 3);
                    model.setValueAt(telefone, i, 4);
                    model.setValueAt(cpf, i, 5);
                    break;
                }
            }

        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Data inv√°lida: " + ex.getMessage());
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao atualizar: " + ex.getMessage());
        }

        /////////////
        
        
        
        
        
        
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        boolean alunoEncontrado = false;

// Recalcula idade com base na nova data
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        LocalDate dataNasc = LocalDate.parse(dataNascStr, formatter);
        int idade = Period.between(dataNasc, LocalDate.now()).getYears();

// Procura o aluno pela matr√≠cula
        for (int i = 0; i < model.getRowCount(); i++) {
            String matriculaTabela = model.getValueAt(i, 0).toString();

            if (matriculaTabela.equals(matricula)) {
                // Atualiza os dados na linha existente
                model.setValueAt(nome, i, 1);
                model.setValueAt(dataNascStr, i, 2);
                model.setValueAt(idade, i, 3);
                model.setValueAt(telefone, i, 4);
                model.setValueAt(cpf, i, 5);
                alunoEncontrado = true;
                break;
            }
        }

// Se o aluno n√£o est√° na tabela, adiciona nova linha
        if (!alunoEncontrado) {
            Object[] novaLinha = new Object[]{
                matricula,
                nome,
                dataNascStr,
                idade,
                telefone,
                cpf
            };
            model.addRow(novaLinha);
        }

        // Limpa os campos ap√≥s cadastro
        id.setText("");
        textoNome.setText("");
        textoDataNasc.setText("");
        textoTelefone.setText("");
        textoCPF.setText("");
        campoIndice.setText("");


    }//GEN-LAST:event_buttonAtualizarActionPerformed

    private void idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfaceAluno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfaceAluno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfaceAluno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfaceAluno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfaceAluno().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAtualizar;
    private javax.swing.JButton buttonBuscar;
    private javax.swing.JButton buttonCadastro;
    private javax.swing.JButton buttonExcluir;
    private javax.swing.JButton buttonNovo;
    private javax.swing.JButton buttonVelho;
    private javax.swing.JFormattedTextField campoIndice;
    private javax.swing.JButton exportarTabela;
    private javax.swing.JFormattedTextField id;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblCPF;
    private javax.swing.JLabel lblDtNasc;
    private javax.swing.JLabel lblMatricula;
    private javax.swing.JLabel lblMatricula1;
    private javax.swing.JLabel lblMatricula2;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblTelefone;
    private javax.swing.JButton mostrarTodos;
    private javax.swing.JFormattedTextField textoCPF;
    private javax.swing.JFormattedTextField textoDataNasc;
    private javax.swing.JTextField textoNome;
    private javax.swing.JFormattedTextField textoTelefone;
    // End of variables declaration//GEN-END:variables

    private static class JTable1 {

        private static void setRowSorter(TableRowSorter<DefaultTableModel> sorter) {
            throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        }

        public JTable1() {
        }
    }
}
